package br.com.mob1st.tests.unit

import io.kotest.common.ExperimentalKotest
import io.kotest.property.Gen
import io.kotest.property.PropTestConfig
import io.kotest.property.checkAll
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.TestScope
import kotlinx.coroutines.test.UnconfinedTestDispatcher
import kotlin.test.assertEquals

/**
 * Creates a [Flow] that will emit all values generated by the given [gen].
 * @param gen the generator of values
 */
@OptIn(ExperimentalKotest::class)
fun <A> flowOfAll(gen: Gen<A>, iterations: Int? = null): Flow<A> = flow {
    gen.checkAll(config = PropTestConfig(iterations = iterations)) {
        emit(it)
    }
}

@OptIn(ExperimentalCoroutinesApi::class)
fun <T> TestScope.assertStateOnCollect(state: StateFlow<T>, expected: T) {
    backgroundScope.launch(UnconfinedTestDispatcher()) {
        state.collect()
    }
    assertEquals(state.value, expected)
}
