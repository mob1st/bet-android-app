package br.com.mob1st.features.finances.impl.infra.data.repositories.suggestions

import app.cash.sqldelight.coroutines.asFlow
import app.cash.sqldelight.coroutines.mapToList
import br.com.mob1st.features.finances.impl.SelectSuggestions
import br.com.mob1st.features.finances.impl.SuggestionsQueries
import br.com.mob1st.features.finances.impl.domain.entities.BuilderNextAction
import br.com.mob1st.features.finances.impl.domain.entities.CategorySuggestion
import br.com.mob1st.features.finances.publicapi.domain.entities.RecurrenceType
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import kotlin.coroutines.CoroutineContext

/**
 * Maps a list of [SelectSuggestions], a class generated by sqldelight to a list of [CategorySuggestion] domain entity.
 * @param context The coroutine context to map the query result to a list of [CategorySuggestion].
 * @param step The step of the category builder.
 * @param mapper The mapper for the suggestion data.
 * @return The list of [CategorySuggestion] domain entities.
 */
internal fun SuggestionsQueries.selectSuggestions(
    context: CoroutineContext,
    step: BuilderNextAction.Step,
    mapper: (query: List<SelectSuggestions>) -> List<CategorySuggestion>,
): Flow<List<CategorySuggestion>> {
    return selectSuggestions(
        type = step.type.asRow(),
        is_expense = step.isExpense,
    ).asFlow()
        .mapToList(context)
        .map(mapper)
}

private fun RecurrenceType.asRow(): String = when (this) {
    RecurrenceType.Fixed -> "fixed"
    RecurrenceType.Seasonal -> "seasonal"
    RecurrenceType.Variable -> "variable"
}
